{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\n\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\n\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst datetimePicker = document.getElementById('datetime-picker');\nconst startBtn = document.querySelector('button[data-start]');\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\n\nlet userSelectedDate;\nlet timerInterval;\n\nflatpickr(datetimePicker, {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate < new Date()) {\n        iziToast.warning({\n            message: \"Please choose a date in the future\",\n            position: \"topRight\",\n            backgroundColor: \"#ef4040\",\n            messageColor: \"#fff\"});\n      startBtn.disabled = true;\n    } else {\n      startBtn.disabled = false;\n    }\n  },\n});\n\nfunction convertMs(ms) {\n  \n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n\n  const days = Math.floor(ms / day);\n\n  const hours = Math.floor((ms % day) / hour);\n\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  \n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction updateTimer() {\n  const timeLeft = userSelectedDate - new Date();\n  if (timeLeft <= 0) {\n    clearInterval(timerInterval);\n    startBtn.disabled = false;\n    datetimePicker.disabled = false;\n      iziToast.info({\n          message: \"Time's up!\",\n          position: \"topRight\",\n          backgroundColor: \"#59a10d\",\n          messageColor: \"#fff\"\n      });\n    return;\n  }\n\n  const { days, hours, minutes, seconds } = convertMs(timeLeft);\n  daysEl.textContent = addLeadingZero(days);\n  hoursEl.textContent = addLeadingZero(hours);\n  minutesEl.textContent = addLeadingZero(minutes);\n  secondsEl.textContent = addLeadingZero(seconds);\n}\n\nstartBtn.addEventListener('click', () => {\n  startBtn.disabled = true;\n  datetimePicker.disabled = true;\n  timerInterval = setInterval(updateTimer, 1000);\n  updateTimer();\n});\n\nstartBtn.disabled = true;\n\n// document.addEventListener('DOMContentLoaded', () => {\n//     const savedDate = localStorage.getItem('selectedDate');\n//     if (savedDate) {\n//         userSelectedDate = new Date(savedDate);\n//         datePicker._flatpickr.setDate(userSelectedDate);\n//         startBtn.disabled = userSelectedDate <= new Date();\n//     }\n// });\n\n// startBtn.addEventListener('click', () => {\n//     if (!userSelectedDate) return;\n//     startCountdown(userSelectedDate);\n// });\n\n// function startCountdown(targetDate) {\n//     const intervalId = setInterval(() => {\n//         const now = new Date().getTime();\n//         const distance = targetDate - now;\n\n//         if (distance < 0) {\n//             clearInterval(intervalId);\n//             console.log(\"Countdown finished\");\n//             localStorage.removeItem('selectedDate');\n//             return;\n//         }\n\n//         const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n//         const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n//         const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n//         const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n//         console.log(`${days}d ${hours}h ${minutes}m ${seconds}s`);\n//     }, 1000);\n// }\n\n\n\n\n\n// if (userSelectedDate && userSelectedDate > new Date()) {\n//   startBtn.disabled = false;\n// }\n\n\n"],"names":["datetimePicker","startBtn","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","timerInterval","flatpickr","selectedDates","iziToast","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","updateTimer","timeLeft"],"mappings":"+IAQA,MAAMA,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAW,SAAS,cAAc,oBAAoB,EACtDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAEzD,IAAIC,EACAC,EAEJC,EAAUR,EAAgB,CACxB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQS,EAAe,CACrBH,EAAmBG,EAAc,CAAC,EAC9BH,EAAmB,IAAI,MACvBI,EAAS,QAAQ,CACb,QAAS,qCACT,SAAU,WACV,gBAAiB,UACjB,aAAc,MAAM,CAAC,EAC3BT,EAAS,SAAW,IAEpBA,EAAS,SAAW,EAEvB,CACH,CAAC,EAED,SAASU,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASC,GAAc,CACrB,MAAMC,EAAWd,EAAmB,IAAI,KACxC,GAAIc,GAAY,EAAG,CACjB,cAAcb,CAAa,EAC3BN,EAAS,SAAW,GACpBD,EAAe,SAAW,GACxBU,EAAS,KAAK,CACV,QAAS,aACT,SAAU,WACV,gBAAiB,UACjB,aAAc,MACxB,CAAO,EACH,MACD,CAED,KAAM,CAAE,KAAAG,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUS,CAAQ,EAC5DlB,EAAO,YAAce,EAAeJ,CAAI,EACxCV,EAAQ,YAAcc,EAAeH,CAAK,EAC1CV,EAAU,YAAca,EAAeF,CAAO,EAC9CV,EAAU,YAAcY,EAAeD,CAAO,CAChD,CAEAf,EAAS,iBAAiB,QAAS,IAAM,CACvCA,EAAS,SAAW,GACpBD,EAAe,SAAW,GAC1BO,EAAgB,YAAYY,EAAa,GAAI,EAC7CA,GACF,CAAC,EAEDlB,EAAS,SAAW"}